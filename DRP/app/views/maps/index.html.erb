<script src="//maps.google.com/maps/api/js?v=3.18&sensor=false&client=&key=AIzaSyCDRuqzgxQ1yfXK0MzEyK2F0YvPYbK-4Hk&libraries=geometry,places&language=&hl=&region="></script> 
<script src="//google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js"></script>
<script src='//google-maps-utility-library-v3.googlecode.com/svn/tags/infobox/1.1.9/src/infobox_packed.js' type='text/javascript'></script> 
<link href="sticky-footer-navbar.css" rel="stylesheet"><!-- only if you need custom infoboxes -->


<div class="row">
  <div class="col-md-3">
     <h3>Route Calculation:</h3>
    <form id="calculate-route" name="calculate-route" action="#" method="get">
      <div class="input-group">
        <span class="input-group-addon" id="basic-addon3">FR:</span>
        <input id="from" name="from" required="required" placeholder="10000 62 ave NW, Edmonton, AB" size="30" type="text" class="form-control">
      </div>
      <div class="input-group">
        <span class="input-group-addon" id="basic-addon3">TO:</span>
        <input id="to" name="to" required="required" placeholder="Ualberta, Edmonton, AB" size="30" type="text" class="form-control">
      </div>
      <br>

      <!--<input type="submit"> -->
      <button type="submit" class="btn btn-primary"><b>Submit</b></button>
      <button type="reset" class="btn btn-secondary">Reset</button>
      <br>
      <br>
      <!-- <input type="reset"> -->
    </form>
  </div>
  <div class="col-md-9 align-center">
    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
    <div id="directions" style='width: 100%; height: 400px;'></div>
  </div>

  <p id="error"></p>
</div>

<script>
var currentlocation;
var directionsDisplay = new google.maps.DirectionsRenderer();
var directionRenderers = new Array();
directionRenderers[0] = new google.maps.DirectionsRenderer();
directionRenderers[1] = new google.maps.DirectionsRenderer();
directionRenderers[2] = new google.maps.DirectionsRenderer();
var directionsService = new google.maps.DirectionsService();
var handler = Gmaps.build('Google');

// Create the google map
handler.buildMap({ internal: {id: 'directions'}}, function(){
  if(navigator.geolocation)
    navigator.geolocation.getCurrentPosition(displayOnMap);
  directionsDisplay.setMap(handler.getMap());
  directionRenderers[0].setMap(handler.getMap());
  directionRenderers[1].setMap(handler.getMap());
  directionRenderers[2].setMap(handler.getMap());
});

// Add the search bar
var input = document.getElementById('pac-input');
var searchBox = new google.maps.places.SearchBox(input);
var map = handler.map.serviceObject;

map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
map.addListener('bounds_changed', function() {
    searchBox.setBounds(map.getBounds());
  });

searchBox.addListener('places_changed', function() {
  var places = searchBox.getPlaces();

  if (places.length == 0) {
    return;
  }
  // For each place, display a route to it.
  var bounds = new google.maps.LatLngBounds();
  places.forEach(function(place) {
    calcRoute(currentlocation, place.geometry.location);
    if (place.geometry.viewport) {
      // Only geocodes have viewport.
      bounds.union(place.geometry.viewport);
    } else {
      bounds.extend(place.geometry.location);
    }
  });
  map.fitBounds(bounds);
});
// ----- end search bar

function displayOnMap(position){
  currentlocation = position;
  var marker = handler.addMarker({
    lat: position.coords.latitude,
    lng: position.coords.longitude
  });
  handler.map.centerOn(marker);
};

// Used for a route between 2 chosen points
function calculateRoute(from, to) {
  var directionsRequest = {
    origin: from,
    destination: to,
    travelMode: google.maps.DirectionsTravelMode.DRIVING,
    unitSystem: google.maps.UnitSystem.METRIC,
    provideRouteAlternatives: true,
  };
  directionsService.route(directionsRequest, function(response, status) {
    if (status == google.maps.DirectionsStatus.OK) {    
      // Clear the old routes
      for (var i = 0, len = directionRenderers.length; i < len; i++){
        directionRenderers[i].setMap(null);
      }
      for (var i = 0, len = response.routes.length; i < len; i++) {
        // Display at most 3 routes
        if (i< 3) {
          directionRenderers[i] = new google.maps.DirectionsRenderer({
            map: map,
            directions: response,
            routeIndex: i
          });  
        }
      }
    }
  });
}

// Used for route between current position and some other position.
function calcRoute(position, destination) {
  var origin      = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
  var request = {
    origin:      origin,
    destination: destination,
    travelMode: google.maps.DirectionsTravelMode.DRIVING,
    unitSystem: google.maps.UnitSystem.METRIC,
    provideRouteAlternatives: true,
  };
  directionsService.route(request, function(response, status) {
      // Clear the old routes
      for (var i = 0, len = directionRenderers.length; i < len; i++){
        directionRenderers[i].setMap(null);
      }
      for (var i = 0, len = response.routes.length; i < len; i++) {
        // Display at most 3 routes
        if (i< 3) {
          directionRenderers[i] = new google.maps.DirectionsRenderer({
            map: map,
            directions: response,
            routeIndex: i
          });  
        }
      }
  });
}

$(document).ready(function() {

  // If the browser supports the Geolocation API
  if (typeof navigator.geolocation == "undefined") {
    $("#error").text("Your browser doesn't support the Geolocation API");
    return;
  }

  $("#from-link, #to-link").click(function(event) {
    event.preventDefault();
    var addressId = this.id.substring(0, this.id.indexOf("-"));

    navigator.geolocation.getCurrentPosition(function(position) {
      var geocoder = new google.maps.Geocoder();
      geocoder.geocode({
        "location": new google.maps.LatLng(position.coords.latitude, position.coords.longitude)
      },
      function(results, status) {
        if (status == google.maps.GeocoderStatus.OK)
          $("#" + addressId).val(results[0].formatted_address);
        else
          $("#error").append("Unable to retrieve your address<br />");
      });
    },
    function(positionError){
      $("#error").append("Error: " + positionError.message + "<br />");
    },
    {
      enableHighAccuracy: true,
      timeout: 10 * 1000 // 10 seconds
    });
  });

  $("#calculate-route").submit(function(event) {
    event.preventDefault();
    calculateRoute($("#from").val(), $("#to").val());
  });
});
</script>